{"version":3,"file":"combine-class-names.umd.production.min.js","sources":["../src/isValidClassName.ts","../src/traverseClassString.ts","../src/traverseClassNames.ts","../src/combineClassNames.ts"],"sourcesContent":["const testCase = /^[a-zA-Z][a-zA-Z0-9_-]*$/\n\nexport function isValidClassName(className: string) {\n  return testCase.test(className)\n}\n\nexport default isValidClassName\n","import isValidClassName from './isValidClassName'\n\nconst splitBySpace = /([\\S]+)/g\n\nexport function traverseClassString(\n  callback: (className: string) => void,\n  classString: string,\n) {\n  const classNames = classString.match(splitBySpace)\n\n  if (classNames) {\n    classNames.forEach((className) => {\n      if (isValidClassName(className)) {\n        callback(className)\n      }\n    })\n  }\n}\n\nexport default traverseClassString\n","import traverseClassString from './traverseClassString'\n\nexport type ClassNamesDist = { [className: string]: boolean }\n\nexport type ClassNameItem = string | ClassNamesDist\n\nexport type ClassNames = (ClassNameItem | ClassNameItem[])[]\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty\n\nexport function traverseClassNames(\n  callback: (className: string) => void,\n  ...items: ClassNames\n) {\n  items.forEach((item) => {\n    if (typeof item === 'string') {\n      return traverseClassString(callback, item)\n    }\n\n    if (typeof item === 'object') {\n      if (Array.isArray(item)) {\n        return traverseClassNames(callback, ...item)\n      }\n\n      for (let key in item) {\n        // avoid enumerable properties on prototypes\n        if (hasOwnProperty.call(item, key) && item[key]) {\n          traverseClassString(callback, key)\n        }\n      }\n    }\n  })\n}\n\nexport default traverseClassNames\n","import traverseClassNames, {\n  ClassNames,\n  ClassNamesDist,\n} from './traverseClassNames'\n\nexport default function combineClassNames(...items: ClassNames) {\n  const classList: string[] = []\n  const cache: ClassNamesDist = {}\n\n  const callback = (className: string) => {\n    if (cache[className]) {\n      return\n    }\n\n    classList.push(className)\n    cache[className] = true\n  }\n\n  traverseClassNames(callback, ...items)\n\n  return classList\n}\n"],"names":["testCase","isValidClassName","className","test","splitBySpace","traverseClassString","callback","classString","classNames","match","forEach","hasOwnProperty","Object","prototype","traverseClassNames","items","item","Array","isArray","key","call","classList","cache","push"],"mappings":"oNAAA,IAAMA,EAAW,2BAEX,SAAUC,EAAiBC,UACxBF,EAASG,KAAKD,GCDvB,IAAME,EAAe,WAEf,SAAUC,EACdC,EACAC,OAEMC,EAAaD,EAAYE,MAAML,GAEjCI,GACFA,EAAWE,SAAS,SAAAR,GACdD,EAAiBC,IACnBI,EAASJ,MCLjB,IAAMS,EAAiBC,OAAOC,UAAUF,eAElC,SAAUG,EACdR,8BACGS,mCAAAA,oBAEHA,EAAML,SAAS,SAAAM,MACO,iBAATA,SACFX,EAAoBC,EAAUU,MAGnB,iBAATA,EAAmB,IACxBC,MAAMC,QAAQF,UACTF,gBAAmBR,UAAaU,QAGpC,IAAIG,KAAOH,EAEVL,EAAeS,KAAKJ,EAAMG,IAAQH,EAAKG,IACzCd,EAAoBC,EAAUa,iBCtB1B,mBACNE,EAAsB,GACtBC,EAAwB,sBAFaP,2BAAAA,yBAa3CD,gBATkB,SAAAZ,GACZoB,EAAMpB,KAIVmB,EAAUE,KAAKrB,GACfoB,EAAMpB,IAAa,YAGWa,IAEzBM"}